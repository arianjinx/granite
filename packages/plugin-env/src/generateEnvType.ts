import fs from 'fs';
import { join } from 'path';
import { ensureSafetyInvokeSync } from '@granite-js/utils';
import type { SerializableObject } from './types';

const DEF_PLACEHOLDER = '$$__DEF';
const ENV_TYPE_TEMPLATE = `
// Auto generated by env plugin. DO NOT EDIT.
type Env = {
${DEF_PLACEHOLDER}
};

interface ImportMeta {
  readonly env: Env & {};
}
`.trim();

function getEnvDefinitionScript(environments: SerializableObject) {
  const defs = Object.keys(environments)
    .map((envName) => {
      // Add 2 spaces to indent.
      return `  ${envName}: string;`;
    })
    .join('\n');

  const script = ENV_TYPE_TEMPLATE.replace(DEF_PLACEHOLDER, defs);

  // Add trailing newline.
  return script + '\n';
}

function generateEnvTypeImpl(rootPath: string, environments: SerializableObject) {
  const sourcePath = join(rootPath, 'src');
  const stat = fs.statSync(sourcePath);

  if (!stat.isDirectory()) {
    console.warn('Failed to generate env type. <rootDir>/src directory not found.');
    return;
  }

  fs.writeFileSync(join(sourcePath, 'env.d.ts'), getEnvDefinitionScript(environments), 'utf-8');
}

export const generateEnvType = ensureSafetyInvokeSync(generateEnvTypeImpl);
